const HID = require('node-hid');
const jsQR = require('jsqr');
const qrcode = require('qrcode-terminal');

async function detectMunbynScanners() {
  return new Promise((resolve, reject) => {
    const devices = HID.devices();

    const UsbDevices = devices.filter((device) => device.manufacturer);

    UsbDevices.map((device, index) => console.log(`Devices detected number ${index} :`, device))

    const munbynScanners = devices.filter((device) => device.manufacturer === 'USBKey Chip'); // need to update for each manufacture scanner

    let result = ""

    if (munbynScanners.length === 0) {
      console.log('No MUNBYN QR code scanner found.');
      result = 'No MUNBYN QR code scanner found.'
    } else {
      console.log('Detected MUNBYN QR code scanners:');
      munbynScanners.forEach((scanner, index) => {
        console.log(`Scanner ${index + 1}:`);
        console.log(`  Vendor ID: ${scanner.vendorId}`);
        console.log(`  Product ID: ${scanner.productId}`);
        console.log(`  Path: ${scanner.path}`);
        console.log(`  Serial Number: ${scanner.serialNumber}`);
      });

      result = munbynScanners
    }
    resolve(result)
  })
}

detectMunbynScanners()

// Replace the vendorId and productId with the appropriate values for your QR code scanner
const vendorId = 8208; // Replace with the actual vendor ID of your scanner
const productId = 30264; // Replace with the actual product ID of your scanner

// Find the QR code scanner by vendorId and productId
const hidDevice = new HID.HID(vendorId, productId);

let qrCodeDataBuffer = Buffer.alloc(0); // Initialize an empty buffer to store the QR code data
let dataCollection = []

let scannedData = '';

// Listen for data from the HID device
hidDevice.on('data', (data) => {

  //console.log(data)
  const scannedChar = String.fromCharCode(data[2]); // Get the scanned character

  console.log(scannedChar.toString())
  scannedData += scannedChar;
  console.log(scannedData)

  if (scannedChar == '\n') {
    // QR code data complete when the Enter key is pressed
    console.log('Scanned QR code:', scannedData.toString());
    scannedData = ''; // Reset for the next scan
  } else {
    //scannedData += scannedChar;
    //console.log(scannedData)
  }
});

// Check if the buffer contains the entire QR code data
function isQRCodeDataComplete(buffer) {
  // Implement your logic here to determine if the buffer contains the complete QR code data.
  // You might need to check specific markers or lengths depending on the data format.

  // For example, if your QR code data is terminated by a specific character like '\n', you could do:
  return buffer.includes('\n');
}

// Close the HID device on program exit
process.on('SIGINT', () => {
  hidDevice.close();
  process.exit();
});

